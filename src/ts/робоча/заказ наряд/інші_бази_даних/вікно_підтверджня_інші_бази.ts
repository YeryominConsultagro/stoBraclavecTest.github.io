import { supabase } from "../../../–≤—Ö—ñ–¥/supabaseClient";
import { all_bd, CRUD } from "./—ñ–Ω—à—ñ_–±–∞–∑–∏_–¥–∞–Ω–∏—Ö"; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö

export const savePromptModalId = "save-prompt-modal";

export function createSavePromptModal(): HTMLDivElement {
  const overlay = document.createElement("div");
  overlay.id = savePromptModalId;
  overlay.className = "modal-overlay-save";
  overlay.style.display = "none";

  const modal = document.createElement("div");
  modal.className = "modal-content-save";

  modal.innerHTML = `<p>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å!!!</p>
    <div class="save-buttons">
      <button id="save-confirm" class="btn-save-confirm">–¢–∞–∫</button>
      <button id="save-cancel" class="btn-save-cancel">–ù—ñ</button>
    </div>`;

  overlay.appendChild(modal);
  return overlay;
}

export let currentTableName: string = "";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ–Ω–ø—É—Ç–∞ —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
const clearInputAndReloadData = async () => {
  // –û—á–∏—â–∞—î–º–æ —ñ–Ω–ø—É—Ç
  const searchInput = document.getElementById(
    "search-input-all_other_bases"
  ) as HTMLInputElement;
  if (searchInput) {
    searchInput.value = "";
  }

  // –û—á–∏—â–∞—î–º–æ dropdown
  const dropdown = document.getElementById(
    "custom-dropdown-all_other_bases"
  ) as HTMLDivElement;
  if (dropdown) {
    dropdown.innerHTML = "";
    dropdown.classList.add("hidden-all_other_bases");
  }

  // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
  if (currentTableName) {
    // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é loadDatabaseData –∑ —ñ–Ω—à–æ–≥–æ —Ñ–∞–π–ª—É
    await loadDatabaseData(currentTableName);
  }
};

export const loadDatabaseData = async (buttonText: string) => {
  currentTableName = buttonText;
};

function getInputValue(): string {
  const inputElement = document.getElementById(
    "search-input-all_other_bases"
  ) as HTMLInputElement;
  return inputElement ? inputElement.value.trim() : "";
}

async function performCrudOperation(): Promise<boolean> {
  if (!CRUD) {
    console.error("–í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ CRUD");
    return false;
  }

  if (!all_bd) {
    console.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ all_bd");
    return false;
  }

  const inputValue = getInputValue();

  if ((CRUD === "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" || CRUD === "–î–æ–¥–∞—Ç–∏") && !inputValue) {
    console.error("–í—ñ–¥—Å—É—Ç–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —ñ–Ω–ø—É—Ç—ñ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó:", CRUD);
    return false;
  }

  try {
    const data = JSON.parse(all_bd);
    const tableName = data.table;

    if (!tableName) {
      console.error("–í—ñ–¥—Å—É—Ç–Ω—è –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤ all_bd");
      return false;
    }

    if (CRUD === "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" || CRUD === "–í–∏–¥–∞–ª–∏—Ç–∏") {
      data.record = { ...data };
    }

    switch (CRUD) {
      case "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
        return await handleEdit(tableName, data, inputValue);
      case "–í–∏–¥–∞–ª–∏—Ç–∏":
        return await handleDelete(tableName, data);
      case "–î–æ–¥–∞—Ç–∏":
        return await handleAdd(tableName, inputValue);
      default:
        console.error("–ù–µ–≤—ñ–¥–æ–º–∏–π CRUD —Ä–µ–∂–∏–º:", CRUD);
        return false;
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó:", error);
    return false;
  }
}

async function handleEdit(
  tableName: string,
  data: any,
  newValue: string
): Promise<boolean> {
  try {
    if (!data.record) {
      console.error("–ù–µ–º–∞—î –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è");
      return false;
    }

    const idField = Object.keys(data.record).find(
      (key) => key.includes("_id") || key === "id"
    );

    if (!idField) {
      console.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è");
      return false;
    }

    const idValue = data.record[idField];
    console.log(
      `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${tableName}, ID –ø–æ–ª–µ: ${idField}, ID –∑–Ω–∞—á–µ–Ω–Ω—è: ${idValue}`
    );

    const { data: currentRecord, error: fetchError } = await supabase
      .from(tableName)
      .select("*")
      .eq(idField, idValue)
      .single();

    if (fetchError || !currentRecord) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É:", fetchError);
      return false;
    }

    let updateData: any = {};

    if (
      tableName === "incomes" ||
      tableName === "receivers" ||
      tableName === "shops" ||
      tableName === "slyusars"
    ) {
      updateData.data = JSON.stringify({ Name: newValue });
    } else if (["works", "details"].includes(tableName)) {
      updateData.data = newValue; // –î–ª—è works –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
    } else {
      console.error("–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", tableName);
      return false;
    }

    const { error } = await supabase
      .from(tableName)
      .update(updateData)
      .eq(idField, idValue);

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ:", error);
      return false;
    }

    console.log(
      `–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ: ${tableName}, ID: ${idValue}, –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è: "${newValue}"`
    );
    return true;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ:", error);
    return false;
  }
}

async function handleDelete(tableName: string, data: any): Promise<boolean> {
  try {
    if (!data.record) {
      console.error("–ù–µ–º–∞—î –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
      return false;
    }

    const idField = Object.keys(data.record).find(
      (key) => key.includes("_id") || key === "id"
    );

    if (!idField) {
      console.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ–ª–µ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
      return false;
    }

    const idValue = data.record[idField];
    console.log(
      `–í–∏–¥–∞–ª–µ–Ω–Ω—è: ${tableName}, ID –ø–æ–ª–µ: ${idField}, ID –∑–Ω–∞—á–µ–Ω–Ω—è: ${idValue}`
    );

    const { error } = await supabase
      .from(tableName)
      .delete()
      .eq(idField, idValue);

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:", error);
      return false;
    }

    console.log(`–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ: ${tableName}, ID: ${idValue}`);
    return true;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:", error);
    return false;
  }
}

async function handleAdd(
  tableName: string,
  newValue: string
): Promise<boolean> {
  try {
    console.log(`–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ: ${tableName}, –∑–Ω–∞—á–µ–Ω–Ω—è: "${newValue}"`);

    let insertData: any = {};
    let newId: number;

    const idFieldMap = {
      incomes: "income_id",
      receivers: "receiver_id",
      shops: "shop_id",
      slyusars: "slyusar_id",
      works: "work_id",
      details: "detail_id",
    } as const;

    type TableName = keyof typeof idFieldMap;

    const idField = idFieldMap[tableName as TableName];

    if (!idField) {
      console.error("–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID:", tableName);
      return false;
    }

    // NEW: Get max ID via order
    const { data: maxIdRows, error: maxIdError } = await supabase
      .from(tableName)
      .select(idField)
      .order(idField, { ascending: false })
      .limit(1);

    // üëá –¥–æ–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
    if (maxIdError) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID:", maxIdError);
      return false;
    }

    const firstRow = maxIdRows?.[0] as Record<string, any>; // –∞–±–æ —Ç–∏–ø—ñ–∑—É–π —á–µ—Ä–µ–∑ `{ [key: string]: any }`

    newId = (firstRow?.[idField] ?? 0) + 1;

    // Build insertData
    // Build insertData
    if (["incomes", "receivers", "shops", "slyusars"].includes(tableName)) {
      insertData = {
        [idField]: newId,
        data: JSON.stringify({ Name: newValue }),
      };
    } else if (["works", "details"].includes(tableName)) {
      insertData = {
        [idField]: newId,
        data: newValue,
      };
    } else {
      console.error("–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:", tableName);
      return false;
    }

    console.log("–î–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:", insertData);

    const { error } = await supabase
      .from(tableName)
      .insert(insertData)
      .select();

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ:", error);
      return false;
    }

    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: ${tableName}, –∑–Ω–∞—á–µ–Ω–Ω—è: "${newValue}"`);
    return true;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ:", error);
    return false;
  }
}

export function showSavePromptModal(): Promise<boolean> {
  return new Promise((resolve) => {
    const modal = document.getElementById(savePromptModalId);
    if (!modal) return resolve(false);

    modal.style.display = "flex";

    const confirmBtn = document.getElementById("save-confirm")!;
    const cancelBtn = document.getElementById("save-cancel")!;

    const cleanup = () => {
      modal.style.display = "none";
      confirmBtn.removeEventListener("click", onConfirm);
      cancelBtn.removeEventListener("click", onCancel);
    };

    const showMessage = (message: string, color: string) => {
      const note = document.createElement("div");
      note.textContent = message;
      note.style.position = "fixed";
      note.style.top = "50%";
      note.style.left = "50%";
      note.style.transform = "translateX(-50%)";
      note.style.backgroundColor = color;
      note.style.color = "white";
      note.style.padding = "12px 24px";
      note.style.borderRadius = "8px";
      note.style.zIndex = "10001";
      note.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
      document.body.appendChild(note);

      setTimeout(() => {
        note.remove();
      }, 1500);
    };

    const closeAllModals = () => {
      document
        .querySelectorAll(".modal-overlay-all_other_bases")
        .forEach((m) => m.classList.add("hidden-all_other_bases"));
    };

    const onConfirm = async () => {
      if (!CRUD) {
        cleanup();
        showMessage("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ CRUD", "#f44336");
        resolve(false);
        return;
      }

      const success = await performCrudOperation();

      cleanup();
      closeAllModals();

      if (success) {
        showMessage("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ", "#4caf50");

        // üîÑ –ü—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—á–∏—â–∞—î–º–æ —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ
        await clearInputAndReloadData();

        resolve(true);
      } else {
        showMessage("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö", "#f44336");
        resolve(false);
      }
    };

    const onCancel = () => {
      cleanup();
      showMessage("‚úñ –°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", "#f44336");
      resolve(false);
    };

    confirmBtn.addEventListener("click", onConfirm);
    cancelBtn.addEventListener("click", onCancel);
  });
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
export { clearInputAndReloadData };
