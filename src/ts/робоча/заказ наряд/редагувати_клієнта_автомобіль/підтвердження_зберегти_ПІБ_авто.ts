export const savePromptModalId = "save-prompt-modal";
import { supabase } from "../../../–≤—Ö—ñ–¥/supabaseClient";
import {
  getModalFormValues,
  userConfirmation,
} from "../—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏_–∫–ª—ñ—î–Ω—Ç–∞_–∞–≤—Ç–æ–º–æ–±—ñ–ª—å"; // —ñ–º–ø–æ—Ä—Ç—É—î–º–æ userConfirmation

export function createSavePromptModal(): HTMLDivElement {
  const overlay = document.createElement("div");
  overlay.id = savePromptModalId;
  overlay.className = "modal-overlay-save";
  overlay.style.display = "none";

  const modal = document.createElement("div");
  modal.className = "modal-content-save";

  modal.innerHTML = `
    <p>–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏?</p>
    <div class="save-buttons">
      <button id="save-confirm" class="btn-save-confirm">–¢–∞–∫</button>
      <button id="save-cancel" class="btn-save-cancel">–ù—ñ</button>
    </div>
  `;

  overlay.appendChild(modal);
  return overlay;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –æ–±—ñ—Ü—è–Ω–∫–æ—é
// ‚úÖ –ó–º—ñ–Ω–∏ –≤ showSavePromptModal: –º–æ–¥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–ø–µ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É –∑–Ω–∏–∑—É

export function showSavePromptModal(): Promise<boolean> {
  return new Promise((resolve) => {
    const modal = document.getElementById(savePromptModalId);
    if (!modal) return resolve(false);

    modal.style.display = "flex";

    const confirmBtn = document.getElementById("save-confirm")!;
    const cancelBtn = document.getElementById("save-cancel")!;

    const cleanup = () => {
      modal.style.display = "none";
      confirmBtn.removeEventListener("click", onConfirm);
      cancelBtn.removeEventListener("click", onCancel);
    };

    const showMessage = (message: string, color: string) => {
      const note = document.createElement("div");
      note.textContent = message;
      note.style.position = "fixed";
      note.style.bottom = "50%";
      note.style.left = "50%";
      note.style.transform = "translateX(-50%)";
      note.style.backgroundColor = color;
      note.style.color = "white";
      note.style.padding = "12px 24px";
      note.style.borderRadius = "8px";
      note.style.zIndex = "10001";
      note.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
      note.style.fontSize = "16px";
      document.body.appendChild(note);

      setTimeout(() => {
        note.remove();
      }, 2500);
    };

    const closeAllModals = () => {
      document
        .querySelectorAll(".modal-overlay-all_other_bases")
        .forEach((m) => m.classList.add("hidden-all_other_bases"));
    };

    const onConfirm = () => {
      cleanup();
      closeAllModals();
      showMessage("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", "#4caf50");
      resolve(true);
    };

    const onCancel = () => {
      cleanup();
      closeAllModals();
      showMessage("‚úñ –°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", "#f44336");
      resolve(false);
    };

    confirmBtn.addEventListener("click", onConfirm);
    cancelBtn.addEventListener("click", onCancel);
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async function deleteCarFromDatabase(carsId: string): Promise<void> {
  const { error } = await supabase.from("cars").delete().eq("cars_id", carsId);

  if (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", error.message);
  } else {
    console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π");
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
async function addCarToDatabase(clientId: string, carData: any): Promise<void> {
  const { error } = await supabase.from("cars").insert({
    client_id: clientId,
    data: {
      –ê–≤—Ç–æ: carData.carModel,
      "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": carData.carNumber,
      –û–± º—î–º: carData.engine,
      –ü–∞–ª—å–Ω–µ: carData.fuel,
      Vincode: carData.vin,
    },
  });

  if (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", error.message);
  } else {
    console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ");
  }
}

export async function saveClientAndCarToDatabase(): Promise<void> {
  const values = getModalFormValues();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ userConfirmation –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
  if (userConfirmation === "no" && values.cars_id) {
    // –í–∏–¥–∞–ª—è—î–º–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —è–∫—â–æ userConfirmation = "no"
    await deleteCarFromDatabase(values.cars_id);
    return;
  }

  if (userConfirmation === "yes" && values.client_id) {
    // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —è–∫—â–æ userConfirmation = "yes"
    await addCarToDatabase(values.client_id, {
      carModel: values.carModel,
      carNumber: values.carNumber,
      engine: values.engine,
      fuel: values.fuel,
      vin: values.vin,
    });
    return;
  }

  // –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (—è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ)
  if (!values.fullName || !values.phone) {
    console.error("‚ùå –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (–ü–Ü–ë, –¢–µ–ª–µ—Ñ–æ–Ω) –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ");
    return;
  }

  if (!values.client_id) {
    // üëâ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    const { data: insertedClients, error: insertClientError } = await supabase
      .from("clients")
      .insert({
        data: {
          –ü–Ü–ë: values.fullName,
          –¢–µ–ª–µ—Ñ–æ–Ω: values.phone,
          –î–∂–µ—Ä–µ–ª–æ: values.income,
          –î–æ–¥–∞—Ç–∫–æ–≤—ñ: values.extra,
        },
      })
      .select("client_id") // –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
      .single();

    if (insertClientError) {
      console.error(
        "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞:",
        insertClientError.message
      );
      return;
    }

    const newClientId = insertedClients?.client_id;
    if (!newClientId) {
      console.error("‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Supabase –Ω–µ –º—ñ—Å—Ç–∏—Ç—å client_id");
      return;
    }

    // üëâ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
    const { error: insertCarError } = await supabase.from("cars").insert({
      client_id: newClientId,
      data: {
        –ê–≤—Ç–æ: values.carModel,
        "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": values.carNumber,
        –û–± º—î–º: values.engine,
        –ü–∞–ª—å–Ω–µ: values.fuel,
        Vincode: values.vin,
      },
    });

    if (insertCarError) {
      console.error(
        "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å:",
        insertCarError.message
      );
    } else {
      console.log("‚úÖ –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç —Ç–∞ –∞–≤—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ");
    }

    return;
  }

  // üîÑ –Ø–∫—â–æ client_id —ñ—Å–Ω—É—î ‚Äî –∑–≤–∏—á–∞–π–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  const { error: clientError } = await supabase
    .from("clients")
    .update({
      data: {
        –ü–Ü–ë: values.fullName,
        –¢–µ–ª–µ—Ñ–æ–Ω: values.phone,
        –î–∂–µ—Ä–µ–ª–æ: values.income,
        –î–æ–¥–∞—Ç–∫–æ–≤—ñ: values.extra,
      },
    })
    .eq("client_id", values.client_id);

  if (clientError) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:", clientError.message);
  } else {
    console.log("‚úÖ –ö–ª—ñ—î–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–∏–π");
  }

  const { error: carError } = await supabase
    .from("cars")
    .update({
      data: {
        –ê–≤—Ç–æ: values.carModel,
        "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": values.carNumber,
        –û–± º—î–º: values.engine,
        –ü–∞–ª—å–Ω–µ: values.fuel,
        Vincode: values.vin,
      },
    })
    .eq("cars_id", values.cars_id);

  if (carError) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", carError.message);
  } else {
    console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–∏–π");
  }
}
