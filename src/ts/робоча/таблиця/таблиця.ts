import { supabase } from "../../–≤—Ö—ñ–¥/supabaseClient";
import {
  createModal,
  showModal,
} from "../–≤—ñ–∫–Ω–æ_–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è_–∑–∞–∫–∞–∑_–Ω–∞—Ä—è–¥—É/–∑–∞–∫–∞–∑_–Ω–∞—Ä—è–¥";

// =============================================================================
// –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü
// =============================================================================

const HEADERS: string[] = [
  "‚Ññ –∞–∫—Ç—É",
  "–î–∞—Ç–∞",
  "–ö–ª—ñ—î–Ω—Ç üîΩ",
  "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å",
  "–°—É–º–º–∞",
];

let actsGlobal: any[] = [];
let clientsGlobal: any[] = [];
let carsGlobal: any[] = [];
let sortByDateStep = 0;

// =============================================================================
// –£–¢–ò–õ–Ü–¢–ò –î–õ–Ø –†–û–ë–û–¢–ò –ó –î–ê–ù–ò–ú–ò
// =============================================================================

/**
 * –ë–µ–∑–ø–µ—á–Ω–µ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON
 */
function safeParseJSON(data: any): any {
  if (typeof data === "string") {
    try {
      return JSON.parse(data);
    } catch {
      return null;
    }
  }
  return data;
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —É DD.MM.YYYY
 */
function formatDate(date: Date): string {
  return `${date.getDate().toString().padStart(2, "0")}.${(date.getMonth() + 1)
    .toString()
    .padStart(2, "0")}.${date.getFullYear()}`;
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
 */
function formatPhone(phone: string): string {
  const digits = phone.replace(/\D/g, "");

  if (digits.length === 12 && digits.startsWith("380")) {
    const code = digits.slice(2, 5);
    const part1 = digits.slice(5, 8);
    const part2 = digits.slice(8, 10);
    const part3 = digits.slice(10, 12);
    return `+38 (${code}) ${part1}-${part2}-${part3}`;
  }

  return phone;
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ DD.MM.YYYY
 */
function validateDateFormat(dateStr: string): boolean {
  const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
  if (!dateRegex.test(dateStr)) return false;

  const [d, m, y] = dateStr.split(".");
  const day = parseInt(d);
  const month = parseInt(m);
  const year = parseInt(y);

  return (
    day >= 1 &&
    day <= 31 &&
    month >= 1 &&
    month <= 12 &&
    year >= 2000 &&
    year <= 2100
  );
}

// =============================================================================
// –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• –ê–ö–¢–Ü–í
// =============================================================================

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
function getClientInfo(act: any, clients: any[]): string {
  const client = clients?.find((c) => c.client_id === act.client_id);
  const clientData = safeParseJSON(client?.data);

  const pib = clientData?.["–ü–Ü–ë"] || "–ù–µ–≤—ñ–¥–æ–º–æ";
  const phone = clientData?.["–¢–µ–ª–µ—Ñ–æ–Ω"] || "";

  return phone ? `${pib} ${phone}` : pib;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ
 */
function getCarInfo(act: any, cars: any[]): string {
  const car = cars?.find((c) => c.cars_id === act.cars_id);
  const carData = safeParseJSON(car?.data);

  const –Ω–æ–º–µ—Ä–ê–≤—Ç–æ = carData?.["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"] || "";
  const –Ω–∞–∑–≤–∞–ê–≤—Ç–æ = carData?.["–ê–≤—Ç–æ"] || "";

  return `${–Ω–æ–º–µ—Ä–ê–≤—Ç–æ} ${–Ω–∞–∑–≤–∞–ê–≤—Ç–æ}`.trim();
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–º–∏ –∑ –∞–∫—Ç—É
 */
function getActAmount(act: any): string {
  const actData = safeParseJSON(act.info || act.data || act.details);

  const rawAmount =
    actData?.["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞"] ||
    actData?.["total"] ||
    actData?.["amount"] ||
    act.total ||
    act.amount;

  if (rawAmount === undefined) return "0 –≥—Ä–Ω";

  const num = Number(rawAmount);
  return isNaN(num) ? "0 –≥—Ä–Ω" : `${num.toLocaleString("uk-UA")} –≥—Ä–Ω`;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ –∞–∫—Ç—É
 */
function getActDate(act: any): string {
  if (!act.date_on) return "-";

  const d = new Date(act.date_on);
  const day = d.getDate().toString().padStart(2, "0");
  const month = (d.getMonth() + 1).toString().padStart(2, "0");
  const year = d.getFullYear();
  const hours = d.getHours().toString().padStart(2, "0");
  const minutes = d.getMinutes().toString().padStart(2, "0");
  return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫—Ç –∑–∞–∫—Ä–∏—Ç–∏–π
 */
function isActClosed(act: any): boolean {
  return act.date_off && !isNaN(Date.parse(act.date_off));
}

// =============================================================================
// –†–ï–ù–î–ï–†–ò–ù–ì –¢–ê–ë–õ–ò–¶–Ü
// =============================================================================

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
 */
function createClientCell(clientInfo: string): HTMLTableCellElement {
  const td = document.createElement("td");

  const phones = [...clientInfo.matchAll(/\+380\d{9}/g)].map((m) => m[0]);
  let pibOnly = clientInfo;
  phones.forEach((p) => {
    pibOnly = pibOnly.replace(p, "").trim();
  });

  td.innerHTML = `<div>${pibOnly}</div>`;

  phones.forEach((p) => {
    const formatted = formatPhone(p);
    td.innerHTML += `<div class="phone-blue-italic">${formatted}</div>`;
  });

  td.addEventListener("click", () => showModal());
  return td;
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –∑ –∞–≤—Ç–æ
 */
function createCarCell(carInfo: string): HTMLTableCellElement {
  const td = document.createElement("td");

  const parts = carInfo.split(" ");
  const –Ω–æ–º–µ—Ä = parts[0] || "";
  const –Ω–∞–∑–≤–∞ = parts.slice(1).join(" ") || "";

  td.innerHTML = `<div>${–Ω–æ–º–µ—Ä}</div>${
    –Ω–∞–∑–≤–∞ ? `<div><span class="car-red-bold">${–Ω–∞–∑–≤–∞}</span></div>` : ""
  }`;

  td.addEventListener("dblclick", () => showModal());
  return td;
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –∫–æ–º—ñ—Ä–∫–∏
 */
function createStandardCell(content: string): HTMLTableCellElement {
  const td = document.createElement("td");
  td.textContent = content;
  td.addEventListener("dblclick", () => showModal());
  return td;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
 */
function renderActsRows(
  acts: any[],
  clients: any[],
  cars: any[],
  tbody: HTMLTableSectionElement
): void {
  tbody.innerHTML = "";

  acts.forEach((act) => {
    const isClosed = isActClosed(act);
    const lockIcon = isClosed ? "üîí" : "üóùÔ∏è";

    const cellsData = [
      `${lockIcon} ${act.act_id?.toString() || "N/A"}`,
      getActDate(act),
      getClientInfo(act, clients),
      getCarInfo(act, cars),
      getActAmount(act),
    ];

    const row = document.createElement("tr");
    row.classList.add(isClosed ? "row-closed" : "row-open");

    cellsData.forEach((cellData, i) => {
      let td: HTMLTableCellElement;

      if (HEADERS[i].includes("–ö–ª—ñ—î–Ω—Ç")) {
        td = createClientCell(cellData);
      } else if (HEADERS[i] === "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å") {
        td = createCarCell(cellData);
      } else {
        td = createStandardCell(cellData);
      }

      row.appendChild(td);
    });

    tbody.appendChild(row);
  });
}

// =============================================================================
// –°–û–†–¢–£–í–ê–ù–ù–Ø
// =============================================================================

/**
 * –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç—ñ–≤
 */
function sortActs(): void {
  if (sortByDateStep === 0) {
    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º (–≤—ñ–¥–∫—Ä–∏—Ç—ñ –∑–≤–µ—Ä—Ö—É)
    actsGlobal.sort((a, b) => {
      const aOpen = !isActClosed(a);
      const bOpen = !isActClosed(b);
      if (aOpen && !bOpen) return -1;
      if (!aOpen && bOpen) return 1;
      return 0;
    });
    sortByDateStep = 1;
  } else {
    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ –∑–≤–µ—Ä—Ö—É)
    actsGlobal.sort(
      (a, b) => new Date(b.date_on).getTime() - new Date(a.date_on).getTime()
    );
    sortByDateStep = 0;
  }
}

// =============================================================================
// –†–û–ë–û–¢–ê –ó –î–ê–¢–ê–ú–ò
// =============================================================================

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å)
 */
function getDefaultDateRange(): string {
  const today = new Date();
  const lastMonth = new Date(
    today.getFullYear(),
    today.getMonth() - 1,
    today.getDate()
  );

  return `${formatDate(lastMonth)} - ${formatDate(today)}`;
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
 */
function getDateRange(): { dateFrom: string; dateTo: string } | null {
  const input = document.getElementById("dateRangePicker") as HTMLInputElement;
  const dateRangeValue = input?.value?.trim();

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  if (!dateRangeValue) {
    console.warn(
      "‚ö†Ô∏è –î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å."
    );
    input.value = getDefaultDateRange();
  }

  const currentValue = input.value.trim();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥—ñ–∞–ø–∞–∑–æ–Ω—É
  if (!currentValue.includes(" - ")) {
    console.error(
      "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥—ñ–∞–ø–∞–∑–æ–Ω—É. –û—á—ñ–∫—É—î—Ç—å—Å—è: DD.MM.YYYY - DD.MM.YYYY"
    );
    alert(
      "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY - DD.MM.YYYY"
    );
    return null;
  }

  const [startStr, endStr] = currentValue.split(" - ");

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç
  if (!validateDateFormat(startStr) || !validateDateFormat(endStr)) {
    console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY");
    alert("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY");
    return null;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:mm:ss
  try {
    const [dateFrom, dateTo] = [startStr, endStr].map((str, i) => {
      const [d, m, y] = str.split(".");
      const full = `${y}-${m.padStart(2, "0")}-${d.padStart(2, "0")}`;
      return i === 0 ? `${full} 00:00:00` : `${full} 23:59:59`;
    });

    return { dateFrom, dateTo };
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–∞—Ç–∏:", error);
    alert(
      `–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞: ${
        error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
      }`
    );
    return null;
  }
}

// =============================================================================
// –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
// =============================================================================

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
async function loadActsFromDB(
  dateFrom: string,
  dateTo: string
): Promise<any[] | null> {
  const { data: acts, error: actsError } = await supabase
    .from("acts")
    .select("*")
    .gte("date_on", dateFrom)
    .lte("date_on", dateTo)
    .order("act_id", { ascending: false });

  if (actsError) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–∫—Ç—ñ–≤:", actsError);
    alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—ñ–≤: ${actsError.message}`);
    return null;
  }

  return acts || [];
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
async function loadClientsFromDB(): Promise<any[] | null> {
  const { data: clients, error: clientError } = await supabase
    .from("clients")
    .select("client_id, data");

  if (clientError) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤:", clientError);
    alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${clientError.message}`);
    return null;
  }

  return clients || [];
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
async function loadCarsFromDB(): Promise<any[] | null> {
  const { data: cars, error: carsError } = await supabase
    .from("cars")
    .select("cars_id, data");

  if (carsError) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–≤—Ç–æ:", carsError);
    alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ: ${carsError.message}`);
    return null;
  }

  return cars || [];
}

// =============================================================================
// –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü
// =============================================================================

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ñ
 */
function createTableHeader(): HTMLTableSectionElement {
  const thead = document.createElement("thead");
  const headerRow = document.createElement("tr");

  HEADERS.forEach((header) => {
    const th = document.createElement("th");
    th.textContent = header;

    th.addEventListener("click", () => {
      if (header === "–ö–ª—ñ—î–Ω—Ç üîΩ") {
        sortActs();
        updateTableBody();
      }
    });

    headerRow.appendChild(th);
  });

  thead.appendChild(headerRow);
  return thead;
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª–∞ —Ç–∞–±–ª–∏—Ü—ñ
 */
function updateTableBody(): void {
  const table = document.querySelector(
    "#table-container-modal-sakaz_narad table"
  );
  if (!table) return;

  const newTbody = document.createElement("tbody");
  renderActsRows(actsGlobal, clientsGlobal, carsGlobal, newTbody);

  const oldTbody = table.querySelector("tbody");
  if (oldTbody) oldTbody.replaceWith(newTbody);
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
 */
function createTable(): HTMLTableElement {
  const table = document.createElement("table");
  table.style.width = "100%";
  table.style.borderCollapse = "collapse";

  const thead = createTableHeader();
  const tbody = document.createElement("tbody");

  renderActsRows(actsGlobal, clientsGlobal, carsGlobal, tbody);

  table.appendChild(thead);
  table.appendChild(tbody);

  return table;
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
 */
function showNoDataMessage(dateRange: string): void {
  const container = document.getElementById(
    "table-container-modal-sakaz_narad"
  );
  if (container) {
    container.innerHTML = `<div style="text-align: center; padding: 20px; color: #666;">
      –ù–µ–º–∞—î –∞–∫—Ç—ñ–≤ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –¥–∞—Ç: ${dateRange}
    </div>`;
  }
}

// =============================================================================
// –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á
// =============================================================================

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∞–∫—Ç—ñ–≤
 */
export async function loadActsTable(): Promise<void> {
  try {
    // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    const dateRange = getDateRange();
    if (!dateRange) return;

    const { dateFrom, dateTo } = dateRange;

    // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏
    const [acts, clients, cars] = await Promise.all([
      loadActsFromDB(dateFrom, dateTo),
      loadClientsFromDB(),
      loadCarsFromDB(),
    ]);

    if (acts === null || clients === null || cars === null) {
      return; // –ü–æ–º–∏–ª–∫–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö
    }

    // 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥–ª–æ–±–∞–ª—å–Ω–æ
    actsGlobal = acts;
    clientsGlobal = clients;
    carsGlobal = cars;

    // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç—ñ–≤
    if (actsGlobal.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –¥–∞—Ç");
      const input = document.getElementById(
        "dateRangePicker"
      ) as HTMLInputElement;
      showNoDataMessage(input?.value || "–Ω–µ–≤—ñ–¥–æ–º–∏–π");
      return;
    }

    // 5. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
    const table = createTable();
    const container = document.getElementById(
      "table-container-modal-sakaz_narad"
    );

    if (container) {
      container.innerHTML = "";
      container.appendChild(table);
    } else {
      console.error(
        "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä table-container-modal-sakaz_narad –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
      );
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error);
    alert(
      `–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${
        error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
      }`
    );
  }
}

/**
 * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
export function refreshActsTable(): void {
  loadActsTable();
}

// =============================================================================
// –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø –ó–ú–Ü–ù
// =============================================================================

/**
 * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —É dateRangePicker
 */
function watchDateRangeChanges(): void {
  const dateRangePicker = document.getElementById(
    "dateRangePicker"
  ) as HTMLInputElement;
  if (!dateRangePicker) return;

  let lastValue = dateRangePicker.value;

  const checkInterval = setInterval(() => {
    const currentValue = dateRangePicker.value;

    if (currentValue !== lastValue) {
      lastValue = currentValue;

      setTimeout(() => {
        if (dateRangePicker.value === currentValue) {
          loadActsTable();
        }
      }, 300);
    }
  }, 500);

  window.addEventListener("beforeunload", () => {
    clearInterval(checkInterval);
  });
}

// =============================================================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// =============================================================================

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—é —Ç–∞–±–ª–∏—Ü—ñ –∞–∫—Ç—ñ–≤
 */
export function initializeActsTable(): void {
  createModal(); // –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –æ–¥—Ä–∞–∑—É
  loadActsTable(); // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  watchDateRangeChanges(); // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –¥–∞—Ç–∏
}

// –í–∏–∫–ª–∏–∫–∞—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—é
initializeActsTable();
